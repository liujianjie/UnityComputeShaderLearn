// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct ParticleData{
    float3 pos;
    float4 color;
};
RWStructuredBuffer<ParticleData> ParticleBuffer;

float Time;

[numthreads(10,10,10)]
void UpdateParticle (uint3 gid : SV_GroupID, uint index : SV_GroupIndex)
{
    // TODO: insert actual code here!
    int pindex = gid.x * 1000 + index;

    float x = sin(index);
    float y = sin(index * 1.2f);
    float3 forward = float3(x,y ,-sqrt(1 - x * x- y *y));
    ParticleBuffer[pindex].color=float4(forward.x, forward.y, cos(index) * 0.5f + 0.5f, 1.0f);
    if(Time > gid.x)
        ParticleBuffer[pindex].pos += forward * 0.005f;
}
